{"ast":null,"code":"import data from \"../data\";\n\nconst messages = (state = data.messages, action) => {\n  const existingMessages = state[action.messagseId];\n\n  switch (action.type) {\n    case \"SEND_MESSAGE\":\n      {\n        //create a new conversation if id is new\n        if (!existingMessages) {\n          return { ...state,\n            [action.id]: [{\n              is_user: true,\n              text: action.message\n            }]\n          };\n        } else {\n          //add message to existing conversation\n          return { ...state,\n            [action.id]: [...existingMessages, //preserve existing messages\n            {\n              is_user: true,\n              text: action.message\n            }]\n          };\n        }\n      }\n\n    case \"SET_EDITING\":\n      {\n        return { ...state,\n          editing: {\n            isEditing: true,\n            editedMessageId: action.editedMessageId\n          }\n        };\n      }\n\n    case \"UPDATE_MESSAGE\":\n      {\n        //got from action: editedText, activeChatId, messageId,\n        const {\n          editedText,\n          activeChatId,\n          messageId\n        } = action.payload;\n        console.log(editedText);\n        return { ...state,\n          [activeChatId]: [...state[activeChatId].splice(messageId), {\n            is_user: true,\n            text: editedText\n          }, ...state[activeChatId].splice(activeChatId + 2)]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default messages;","map":{"version":3,"sources":["/Users/daranguyen/Desktop/UBC/Courses/CPSC436I/assignments/a2/MessageApp/message-app/src/reducers/messages.js"],"names":["data","messages","state","action","existingMessages","messagseId","type","id","is_user","text","message","editing","isEditing","editedMessageId","editedText","activeChatId","messageId","payload","console","log","splice"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGF,IAAI,CAACC,QAAd,EAAwBE,MAAxB,KAAmC;AAClD,QAAMC,gBAAgB,GAAGF,KAAK,CAACC,MAAM,CAACE,UAAR,CAA9B;;AACA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAK,cAAL;AAAqB;AACnB;AACA,YAAI,CAACF,gBAAL,EAAuB;AACrB,iBAAO,EACL,GAAGF,KADE;AAEL,aAACC,MAAM,CAACI,EAAR,GAAa,CACX;AACEC,cAAAA,OAAO,EAAE,IADX;AAEEC,cAAAA,IAAI,EAAEN,MAAM,CAACO;AAFf,aADW;AAFR,WAAP;AASD,SAVD,MAUO;AACL;AACA,iBAAO,EACL,GAAGR,KADE;AAEL,aAACC,MAAM,CAACI,EAAR,GAAa,CACX,GAAGH,gBADQ,EACU;AACrB;AACEI,cAAAA,OAAO,EAAE,IADX;AAEEC,cAAAA,IAAI,EAAEN,MAAM,CAACO;AAFf,aAFW;AAFR,WAAP;AAUD;AACF;;AACD,SAAK,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGR,KADE;AAELS,UAAAA,OAAO,EAAE;AACPC,YAAAA,SAAS,EAAE,IADJ;AAEPC,YAAAA,eAAe,EAAEV,MAAM,CAACU;AAFjB;AAFJ,SAAP;AAOD;;AACD,SAAK,gBAAL;AAAuB;AACrB;AACA,cAAM;AAAEC,UAAAA,UAAF;AAAcC,UAAAA,YAAd;AAA4BC,UAAAA;AAA5B,YAA0Cb,MAAM,CAACc,OAAvD;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA,eAAO,EACL,GAAGZ,KADE;AAEL,WAACa,YAAD,GAAgB,CACd,GAAGb,KAAK,CAACa,YAAD,CAAL,CAAoBK,MAApB,CAA2BJ,SAA3B,CADW,EAEd;AACER,YAAAA,OAAO,EAAE,IADX;AAEEC,YAAAA,IAAI,EAAEK;AAFR,WAFc,EAMd,GAAGZ,KAAK,CAACa,YAAD,CAAL,CAAoBK,MAApB,CAA2BL,YAAY,GAAG,CAA1C,CANW;AAFX,SAAP;AAWD;;AACD;AACE,aAAOb,KAAP;AArDJ;AAuDD,CAzDD;;AA2DA,eAAeD,QAAf","sourcesContent":["import data from \"../data\";\n\nconst messages = (state = data.messages, action) => {\n  const existingMessages = state[action.messagseId];\n  switch (action.type) {\n    case \"SEND_MESSAGE\": {\n      //create a new conversation if id is new\n      if (!existingMessages) {\n        return {\n          ...state,\n          [action.id]: [\n            {\n              is_user: true,\n              text: action.message,\n            },\n          ],\n        };\n      } else {\n        //add message to existing conversation\n        return {\n          ...state,\n          [action.id]: [\n            ...existingMessages, //preserve existing messages\n            {\n              is_user: true,\n              text: action.message,\n            },\n          ],\n        };\n      }\n    }\n    case \"SET_EDITING\": {\n      return {\n        ...state,\n        editing: {\n          isEditing: true,\n          editedMessageId: action.editedMessageId,\n        },\n      };\n    }\n    case \"UPDATE_MESSAGE\": {\n      //got from action: editedText, activeChatId, messageId,\n      const { editedText, activeChatId, messageId } = action.payload;\n      console.log(editedText);\n      return {\n        ...state,\n        [activeChatId]: [\n          ...state[activeChatId].splice(messageId),\n          {\n            is_user: true,\n            text: editedText,\n          },\n          ...state[activeChatId].splice(activeChatId + 2),\n        ],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default messages;\n"]},"metadata":{},"sourceType":"module"}