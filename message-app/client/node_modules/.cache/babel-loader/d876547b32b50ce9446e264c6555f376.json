{"ast":null,"code":"var _jsxFileName = \"/Users/daranguyen/Desktop/UBC/Courses/CPSC436I/assignments/a2/MessageApp/message-app/src/components/ChatMessages.js\";\nimport React, { useEffect, useRef } from \"react\";\n\nconst ChatMessage = ({\n  message\n}) => {\n  const {\n    text,\n    is_user\n  } = message;\n\n  const handleOnclick = e => {\n    console.log(e.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `chat ${is_user ? \"is-user\" : \"\"}`,\n    onClick: handleOnclick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, text);\n}; //parent: ChatWindow\n\n\nconst ChatMessages = ({\n  messages\n}) => {\n  const el = useRef(null); //direct dom manipulation, returns a pointer/ref to the phisical DOM element\n\n  useEffect(() => {\n    // componentDidMount() = component rendered, componentWillUpdate() if things in [ ] changes\n    //if nothing is passed to 2nd argument = undefined -> callback is called on every update\n    el.current.scrollTop = el.current.scrollHeight;\n  }, [messages]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-messages\",\n    ref: el,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, messages.map(m => /*#__PURE__*/React.createElement(ChatMessage, {\n    message: m,\n    key: m.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default ChatMessages;","map":{"version":3,"sources":["/Users/daranguyen/Desktop/UBC/Courses/CPSC436I/assignments/a2/MessageApp/message-app/src/components/ChatMessages.js"],"names":["React","useEffect","useRef","ChatMessage","message","text","is_user","handleOnclick","e","console","log","target","value","ChatMessages","messages","el","current","scrollTop","scrollHeight","map","m","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACnC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,OAA1B;;AACA,QAAMG,aAAa,GAAIC,CAAD,IAAO;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB;AACD,GAFD;;AAGA,sBACE;AACE,IAAA,SAAS,EAAG,QAAON,OAAO,GAAG,SAAH,GAAe,EAAG,EAD9C;AAEE,IAAA,OAAO,EAAEC,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGF,IAJH,CADF;AAQD,CAbD,C,CAeA;;;AACA,MAAMQ,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACrC,QAAMC,EAAE,GAAGb,MAAM,CAAC,IAAD,CAAjB,CADqC,CACZ;;AACzBD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAc,IAAAA,EAAE,CAACC,OAAH,CAAWC,SAAX,GAAuBF,EAAE,CAACC,OAAH,CAAWE,YAAlC;AACD,GAJQ,EAIN,CAACJ,QAAD,CAJM,CAAT;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAA+B,IAAA,GAAG,EAAEC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QAAQ,CAACK,GAAT,CAAcC,CAAD,iBACZ,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEA,CAAtB;AAAyB,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF;AAOD,CAfD;;AAgBA,eAAeR,YAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nconst ChatMessage = ({ message }) => {\n  const { text, is_user } = message;\n  const handleOnclick = (e) => {\n    console.log(e.target.value);\n  };\n  return (\n    <span\n      className={`chat ${is_user ? \"is-user\" : \"\"}`}\n      onClick={handleOnclick}\n    >\n      {text}\n    </span>\n  );\n};\n\n//parent: ChatWindow\nconst ChatMessages = ({ messages }) => {\n  const el = useRef(null); //direct dom manipulation, returns a pointer/ref to the phisical DOM element\n  useEffect(() => {\n    // componentDidMount() = component rendered, componentWillUpdate() if things in [ ] changes\n    //if nothing is passed to 2nd argument = undefined -> callback is called on every update\n    el.current.scrollTop = el.current.scrollHeight;\n  }, [messages]);\n\n  return (\n    <div className=\"chat-messages\" ref={el}>\n      {messages.map((m) => (\n        <ChatMessage message={m} key={m.id}></ChatMessage>\n      ))}\n    </div>\n  );\n};\nexport default ChatMessages;\n"]},"metadata":{},"sourceType":"module"}