{"ast":null,"code":"import data from \"../data\";\n\nconst messages = (state = data.messages, action) => {\n  const existingMessages = state[action.messagseId];\n\n  switch (action.type) {\n    case \"SEND_MESSAGE\":\n      {\n        //create a new conversation if id is new\n        if (!existingMessages) {\n          return { ...state,\n            [action.id]: [{\n              is_user: true,\n              text: action.message\n            }]\n          };\n        } else {\n          //add message to existing conversation\n          return { ...state,\n            [action.id]: [...existingMessages, //preserve existing messages\n            {\n              is_user: true,\n              text: action.message\n            }]\n          };\n        }\n      }\n\n    case \"SET_EDITING\":\n      {\n        return { ...state,\n          editing: {\n            isEditing: true,\n            editedMessageId: action.editedMessageId\n          }\n        };\n      }\n\n    case \"UPDATE_MESSAGE\":\n      {\n        const newState = { ...state\n        };\n        const activeConversation = [...state[action.activeId]];\n        newState[action.activeId] = activeConversation;\n        activeConversation[state.editing.editedMessageId] = {\n          is_user: true,\n          text: action.editedText\n        };\n        newState.editing = {\n          isEditing: false,\n          editedMessageId: null //optional\n\n        };\n        return newState;\n      }\n\n    case \"DELETE_MESSAGE\":\n      {\n        // shouldn't mutate state directly\n        return { ...state,\n          [state[action.activeId]]: state[action.activeId].filter((message, index) => action.messagseId !== index)\n        };\n      }\n\n    case \"SET_ACTIVE_ID\":\n      {\n        //when switch conversation, clear editing\n        return { ...state,\n          [state.editing]: {\n            isEditing: false,\n            editedMessageId: null //optional\n\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default messages;","map":{"version":3,"sources":["/Users/daranguyen/Desktop/UBC/Courses/CPSC436I/assignments/a2/MessageApp/message-app/src/reducers/messages.js"],"names":["data","messages","state","action","existingMessages","messagseId","type","id","is_user","text","message","editing","isEditing","editedMessageId","newState","activeConversation","activeId","editedText","filter","index"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGF,IAAI,CAACC,QAAd,EAAwBE,MAAxB,KAAmC;AAClD,QAAMC,gBAAgB,GAAGF,KAAK,CAACC,MAAM,CAACE,UAAR,CAA9B;;AACA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAK,cAAL;AAAqB;AACnB;AACA,YAAI,CAACF,gBAAL,EAAuB;AACrB,iBAAO,EACL,GAAGF,KADE;AAEL,aAACC,MAAM,CAACI,EAAR,GAAa,CACX;AACEC,cAAAA,OAAO,EAAE,IADX;AAEEC,cAAAA,IAAI,EAAEN,MAAM,CAACO;AAFf,aADW;AAFR,WAAP;AASD,SAVD,MAUO;AACL;AACA,iBAAO,EACL,GAAGR,KADE;AAEL,aAACC,MAAM,CAACI,EAAR,GAAa,CACX,GAAGH,gBADQ,EACU;AACrB;AACEI,cAAAA,OAAO,EAAE,IADX;AAEEC,cAAAA,IAAI,EAAEN,MAAM,CAACO;AAFf,aAFW;AAFR,WAAP;AAUD;AACF;;AACD,SAAK,aAAL;AAAoB;AAClB,eAAO,EACL,GAAGR,KADE;AAELS,UAAAA,OAAO,EAAE;AACPC,YAAAA,SAAS,EAAE,IADJ;AAEPC,YAAAA,eAAe,EAAEV,MAAM,CAACU;AAFjB;AAFJ,SAAP;AAOD;;AACD,SAAK,gBAAL;AAAuB;AACrB,cAAMC,QAAQ,GAAG,EAAE,GAAGZ;AAAL,SAAjB;AACA,cAAMa,kBAAkB,GAAG,CAAC,GAAGb,KAAK,CAACC,MAAM,CAACa,QAAR,CAAT,CAA3B;AACAF,QAAAA,QAAQ,CAACX,MAAM,CAACa,QAAR,CAAR,GAA4BD,kBAA5B;AACAA,QAAAA,kBAAkB,CAACb,KAAK,CAACS,OAAN,CAAcE,eAAf,CAAlB,GAAoD;AAClDL,UAAAA,OAAO,EAAE,IADyC;AAElDC,UAAAA,IAAI,EAAEN,MAAM,CAACc;AAFqC,SAApD;AAIAH,QAAAA,QAAQ,CAACH,OAAT,GAAmB;AACjBC,UAAAA,SAAS,EAAE,KADM;AAEjBC,UAAAA,eAAe,EAAE,IAFA,CAEM;;AAFN,SAAnB;AAIA,eAAOC,QAAP;AACD;;AACD,SAAK,gBAAL;AAAuB;AACrB;AACA,eAAO,EACL,GAAGZ,KADE;AAEL,WAACA,KAAK,CAACC,MAAM,CAACa,QAAR,CAAN,GAA0Bd,KAAK,CAACC,MAAM,CAACa,QAAR,CAAL,CAAuBE,MAAvB,CACxB,CAACR,OAAD,EAAUS,KAAV,KAAoBhB,MAAM,CAACE,UAAP,KAAsBc,KADlB;AAFrB,SAAP;AAMD;;AACD,SAAK,eAAL;AAAsB;AACpB;AACA,eAAO,EACL,GAAGjB,KADE;AAEL,WAACA,KAAK,CAACS,OAAP,GAAiB;AACfC,YAAAA,SAAS,EAAE,KADI;AAEfC,YAAAA,eAAe,EAAE,IAFF,CAEQ;;AAFR;AAFZ,SAAP;AAOD;;AACD;AACE,aAAOX,KAAP;AAtEJ;AAwED,CA1ED;;AA4EA,eAAeD,QAAf","sourcesContent":["import data from \"../data\";\n\nconst messages = (state = data.messages, action) => {\n  const existingMessages = state[action.messagseId];\n  switch (action.type) {\n    case \"SEND_MESSAGE\": {\n      //create a new conversation if id is new\n      if (!existingMessages) {\n        return {\n          ...state,\n          [action.id]: [\n            {\n              is_user: true,\n              text: action.message,\n            },\n          ],\n        };\n      } else {\n        //add message to existing conversation\n        return {\n          ...state,\n          [action.id]: [\n            ...existingMessages, //preserve existing messages\n            {\n              is_user: true,\n              text: action.message,\n            },\n          ],\n        };\n      }\n    }\n    case \"SET_EDITING\": {\n      return {\n        ...state,\n        editing: {\n          isEditing: true,\n          editedMessageId: action.editedMessageId,\n        },\n      };\n    }\n    case \"UPDATE_MESSAGE\": {\n      const newState = { ...state };\n      const activeConversation = [...state[action.activeId]];\n      newState[action.activeId] = activeConversation;\n      activeConversation[state.editing.editedMessageId] = {\n        is_user: true,\n        text: action.editedText,\n      };\n      newState.editing = {\n        isEditing: false,\n        editedMessageId: null, //optional\n      };\n      return newState;\n    }\n    case \"DELETE_MESSAGE\": {\n      // shouldn't mutate state directly\n      return {\n        ...state,\n        [state[action.activeId]]: state[action.activeId].filter(\n          (message, index) => action.messagseId !== index\n        ),\n      };\n    }\n    case \"SET_ACTIVE_ID\": {\n      //when switch conversation, clear editing\n      return {\n        ...state,\n        [state.editing]: {\n          isEditing: false,\n          editedMessageId: null, //optional\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default messages;\n"]},"metadata":{},"sourceType":"module"}